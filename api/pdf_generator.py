"""
PDF Report Generator for Project Samarth
Generates professional PDF reports from query results
"""

from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from io import BytesIO
import pandas as pd
from datetime import datetime

def generate_pdf_report(question: str, answer: str, structured_results: list, citations: list, request_id: str) -> BytesIO:
    """Generate a professional PDF report"""
    
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
    
    # Get styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        textColor=colors.HexColor('#1f2937')
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12,
        textColor=colors.HexColor('#374151')
    )
    
    # Build story
    story = []
    
    # Header
    story.append(Paragraph("ðŸŒ¾ Project Samarth - Agriculture Data Report", title_style))
    story.append(Spacer(1, 12))
    
    # Metadata
    metadata = f"""
    <b>Generated:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}<br/>
    <b>Request ID:</b> {request_id}<br/>
    <b>Data Source:</b> data.gov.in & Historical Database
    """
    story.append(Paragraph(metadata, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Question
    story.append(Paragraph("Question Asked", heading_style))
    story.append(Paragraph(f"<i>{question}</i>", styles['Normal']))
    story.append(Spacer(1, 15))
    
    # Answer
    story.append(Paragraph("Analysis Results", heading_style))
    story.append(Paragraph(answer.replace('\n', '<br/>'), styles['Normal']))
    story.append(Spacer(1, 15))
    
    # Data Table
    if structured_results:
        story.append(Paragraph("Detailed Data", heading_style))
        
        # Convert to table format
        df = pd.DataFrame(structured_results)
        
        # Create table data
        table_data = [list(df.columns)]
        for _, row in df.head(10).iterrows():  # Limit to 10 rows
            table_data.append([str(val) for val in row.values])
        
        # Create table
        table = Table(table_data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
        ]))
        
        story.append(table)
        story.append(Spacer(1, 15))
    
    # Citations
    if citations:
        story.append(Paragraph("Data Sources & Citations", heading_style))
        
        for i, citation in enumerate(citations, 1):
            citation_text = f"""
            <b>{i}. {citation['dataset_title']}</b><br/>
            Publisher: {citation['publisher']}<br/>
            Source: <link href="{citation['resource_url']}">{citation['resource_url']}</link><br/>
            Usage: {citation.get('query_summary', 'Data source for analysis')}
            """
            story.append(Paragraph(citation_text, styles['Normal']))
            story.append(Spacer(1, 10))
    
    # Footer
    story.append(Spacer(1, 30))
    footer_text = """
    <i>This report was generated by Project Samarth - an intelligent Q&A system for Indian agriculture data.
    All data is sourced from official government portals and historical databases with complete traceability.</i>
    """
    story.append(Paragraph(footer_text, styles['Normal']))
    
    # Build PDF
    doc.build(story)
    buffer.seek(0)
    return buffer